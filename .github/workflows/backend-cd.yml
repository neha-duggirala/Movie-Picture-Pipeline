name: Backend Continuous Deployment
# Triggers
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:
  # Automatic trigger on pull_request events targeting the main branch
  pull_request:
    branches:
      - main
    paths:
      - 'starter/backend/**'
# Jobs in the workflow: linting, testing and build

env:
    REACT_APP_MOVIE_API_URL: a05560c09693545d9a1e1fd0313ffc9b-1622971913.us-east-1.elb.amazonaws.com 

jobs:
    linting:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
  
        - name: Set up Python 3.10
          uses: actions/setup-python@v5
          with:
            python-version: '3.10' 
  
        - name: Install pipenv
          run: pip install pipenv --user
  
        - name: Install flake8
          run: pip install flake8
  
        - name: Install dependencies
          run: cd starter/backend && pipenv install
  
        - name: Run the linter
          run: cd starter/backend && pipenv run lint
  
    testing:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
  
        - name: Set up Python 3.10
          uses: actions/setup-python@v5
          with:
            python-version: '3.10' 
  
        - name: Install pipenv
          run: pip install pipenv --user      
  
        - name: Install dependencies
          run: cd starter/backend && pipenv install
  
        - name: Run tests
          run: cd starter/backend && pipenv run test
  
    deploy:
        needs: [linting, testing]
        runs-on: ubuntu-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set up Python 3.10
          uses: actions/setup-python@v5
          with:
            python-version: '3.10' 

        - name: Install pipenv
          run: pip install pipenv --user

        - name: Install dependencies
          run: cd starter/backend && pipenv install

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v3
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1  
    
        - name: Set up ECR login
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Build docker image with SHA 
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: backend
            IMAGE_TAG: ${{ github.sha }}
          run: cd starter/backend && docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .

        - name: Push to ECR
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: backend
            IMAGE_TAG: ${{ github.sha }}
          run: cd starter/backend && docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

        - name: Update kubeconfig
          run: aws eks update-kubeconfig --name cluster --region us-east-1

        - name: confirm that kubectl is updated
          run: kubectl config view --minify

        - name: Set image tag to newer version
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: frontend
            IMAGE_TAG: ${{ github.sha }}
          run: cd starter/backend/k8s && kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG

        - name: Deploy application to EKS cluster
          run: cd starter/backend/k8s && kustomize build | kubectl apply -f -

        - name: Print Application URLs
          run: |
              kubectl get svc -A

        - name: check if the backend is active
          env:
            REACT_APP_MOVIE_API_URL: ${{ env.REACT_APP_MOVIE_API_URL }}
          run: |
              echo $REACT_APP_MOVIE_API_URL/movies
              curl --max-time 10 $REACT_APP_MOVIE_API_URL/movies
                
  
   