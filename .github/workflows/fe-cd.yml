# Workflow name
name: Frontend CD Workflow

# Triggers
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:
  # Automatic trigger on push events targeting the main branch
  push:
    branches:
      - main

jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2
            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                node-version: '14'
            - name: Install dependencies
              run: |
                npm install
              working-directory: starter/frontend
            - name: Run ESLint
              run: npm run lint
              working-directory: starter/frontend
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2
            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                node-version: '14'
            - name: Install dependencies
              run: npm install
              working-directory: starter/frontend
            - name: Run tests
              run: npm test --passWithNoTests
              working-directory: starter/frontend
    build:
        runs-on: ubuntu-latest
        needs: [lint, test]
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                node-version: '14'

            - name: Create environment variable
              run: REACT_APP_MOVIE_API_URL=https://58D318E473F5F49DAF0B2651C35BC298.gr7.us-east-1.eks.amazonaws.com

            - name: Install dependencies
              run: npm install

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v3
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1

            - name: Set up ECR login
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: show the aws service account id
              run:  aws sts get-caller-identity 

            - name: Build docker image with SHA 
              env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                REPOSITORY: frontend
                IMAGE_TAG: ${{ github.sha }}
              run: cd starter/frontend && docker build --build-arg=REACT_APP_MOVIE_API_URL -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
           
            - name: Push to ECR
              env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                REPOSITORY: frontend
                IMAGE_TAG: ${{ github.sha }}
              run: cd starter/frontend && docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
      
            - name: Update kubeconfig
              run: aws eks update-kubeconfig --name cluster --region us-east-1

            - name: confirm that kubectl is updated
              run: kubectl config view --minify

            - name: get the services names
              run:  kubectl get svc

            - name: Set image tag to newer version
              env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                REPOSITORY: frontend
                IMAGE_TAG: ${{ github.sha }}
              run: cd starter/frontend/k8s && kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG

            - name: Kube context
              run: kubectl config get-contexts

            - name: Deploy application to EKS cluster
              run: cd starter/frontend/k8s && kustomize build | kubectl apply -f - --validate=false
